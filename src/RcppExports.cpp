// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// matrix_mult_armadillo
arma::mat matrix_mult_armadillo(arma::mat x, arma::mat y);
RcppExport SEXP _vaxedemic_matrix_mult_armadillo(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_mult_armadillo(x, y));
    return rcpp_result_gen;
END_RCPP
}
// matrix_mult
Eigen::MatrixXd matrix_mult(const Eigen::MatrixXd& x, const Eigen::MatrixXd& y);
RcppExport SEXP _vaxedemic_matrix_mult(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_mult(x, y));
    return rcpp_result_gen;
END_RCPP
}
// stochastic_simulation
Rcpp::NumericMatrix stochastic_simulation(Eigen::MatrixXd S, Eigen::MatrixXd I, Eigen::MatrixXd R, double beta, double gamma, Eigen::MatrixXd Kdelta, Eigen::MatrixXd K1, Eigen::MatrixXd Mm1, int div, int ndays, int n_age_groups, int n_countries);
RcppExport SEXP _vaxedemic_stochastic_simulation(SEXP SSEXP, SEXP ISEXP, SEXP RSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP KdeltaSEXP, SEXP K1SEXP, SEXP Mm1SEXP, SEXP divSEXP, SEXP ndaysSEXP, SEXP n_age_groupsSEXP, SEXP n_countriesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type S(SSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type I(ISEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type R(RSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Kdelta(KdeltaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type K1(K1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Mm1(Mm1SEXP);
    Rcpp::traits::input_parameter< int >::type div(divSEXP);
    Rcpp::traits::input_parameter< int >::type ndays(ndaysSEXP);
    Rcpp::traits::input_parameter< int >::type n_age_groups(n_age_groupsSEXP);
    Rcpp::traits::input_parameter< int >::type n_countries(n_countriesSEXP);
    rcpp_result_gen = Rcpp::wrap(stochastic_simulation(S, I, R, beta, gamma, Kdelta, K1, Mm1, div, ndays, n_age_groups, n_countries));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_vaxedemic_matrix_mult_armadillo", (DL_FUNC) &_vaxedemic_matrix_mult_armadillo, 2},
    {"_vaxedemic_matrix_mult", (DL_FUNC) &_vaxedemic_matrix_mult, 2},
    {"_vaxedemic_stochastic_simulation", (DL_FUNC) &_vaxedemic_stochastic_simulation, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_vaxedemic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
